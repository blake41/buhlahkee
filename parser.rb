#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative "lexer"
  require_relative "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 37)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code) # Tokenize the code using our lexer
    puts @tokens.inspect if show_tokens
    do_parse # Kickoff the parsing process
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,     3,     6,     3,     7,     9,     8 ]

racc_action_check = [
     0,     0,     8,     8,     1,     7,     3 ]

racc_action_pointer = [
    -2,     4,   nil,     2,   nil,   nil,   nil,     5,     0,   nil,
   nil ]

racc_action_default = [
    -6,    -6,    -1,    -6,    -3,    -4,    -5,    -6,    -6,    11,
    -2 ]

racc_goto_table = [
     2,     1,   nil,   nil,   nil,   nil,   nil,   nil,    10 ]

racc_goto_check = [
     2,     1,   nil,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     5,     4 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 6, :_reduce_1,
  3, 8, :_reduce_2,
  1, 7, :_reduce_none,
  1, 7, :_reduce_none,
  1, 9, :_reduce_5 ]

racc_reduce_n = 6

racc_shift_n = 11

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :IDENTIFIER => 3,
  "=" => 4 }

racc_nt_base = 5

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "IDENTIFIER",
  "\"=\"",
  "$start",
  "Expressions",
  "Expression",
  "SetLocal",
  "Literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 12)
  def _reduce_1(val, _values, result)
     result = Nodes.new(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 16)
  def _reduce_2(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_5(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
